# Copyright 2025 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Standardized error schema for the Agent Payments Protocol.

This module implements RFC 7807 "Problem Details for HTTP APIs" to provide
consistent error reporting across all AP2 agents and endpoints.
"""

from enum import Enum
from typing import Any, Dict, Optional

from pydantic import BaseModel, Field


class ErrorType(str, Enum):
  """Standard error types for AP2 protocol errors."""

  # Mandate lifecycle errors
  MANDATE_NOT_FOUND = "https://ap2-protocol.org/errors/mandate-not-found"
  MANDATE_ALREADY_REVOKED = "https://ap2-protocol.org/errors/mandate-already-revoked"
  MANDATE_EXPIRED = "https://ap2-protocol.org/errors/mandate-expired"
  MANDATE_INVALID_STATUS = "https://ap2-protocol.org/errors/mandate-invalid-status"
  MANDATE_REVOCATION_FAILED = "https://ap2-protocol.org/errors/mandate-revocation-failed"

  # Payment processing errors
  PAYMENT_METHOD_NOT_SUPPORTED = "https://ap2-protocol.org/errors/payment-method-not-supported"
  PAYMENT_DECLINED = "https://ap2-protocol.org/errors/payment-declined"
  PAYMENT_AMOUNT_EXCEEDED = "https://ap2-protocol.org/errors/payment-amount-exceeded"
  PAYMENT_INSUFFICIENT_FUNDS = "https://ap2-protocol.org/errors/payment-insufficient-funds"
  PAYMENT_PROCESSOR_ERROR = "https://ap2-protocol.org/errors/payment-processor-error"

  # Authentication and authorization errors
  UNAUTHORIZED_AGENT = "https://ap2-protocol.org/errors/unauthorized-agent"
  INVALID_SIGNATURE = "https://ap2-protocol.org/errors/invalid-signature"
  MISSING_AUTHORIZATION = "https://ap2-protocol.org/errors/missing-authorization"

  # Validation errors
  INVALID_MANDATE_FORMAT = "https://ap2-protocol.org/errors/invalid-mandate-format"
  MISSING_REQUIRED_FIELD = "https://ap2-protocol.org/errors/missing-required-field"
  INVALID_PAYMENT_REQUEST = "https://ap2-protocol.org/errors/invalid-payment-request"

  # System errors
  INTERNAL_SERVER_ERROR = "https://ap2-protocol.org/errors/internal-server-error"
  SERVICE_UNAVAILABLE = "https://ap2-protocol.org/errors/service-unavailable"
  TIMEOUT = "https://ap2-protocol.org/errors/timeout"


class AP2Error(BaseModel):
  """Standardized error response following RFC 7807.

  This provides a consistent error format across all AP2 agents and endpoints,
  making it easier for clients to handle errors programmatically.
  """

  type: str = Field(
      ...,
      description="A URI reference that identifies the problem type. "
                  "When dereferenced, it SHOULD provide human-readable documentation "
                  "for the problem type (e.g., using HTML)."
  )
  title: str = Field(
      ...,
      description="A short, human-readable summary of the problem type. "
                  "It SHOULD NOT change from occurrence to occurrence of the problem, "
                  "except for purposes of localization."
  )
  status: int = Field(
      ...,
      description="The HTTP status code generated by the origin server for this "
                  "occurrence of the problem."
  )
  detail: str = Field(
      ...,
      description="A human-readable explanation specific to this occurrence of the problem."
  )
  instance: Optional[str] = Field(
      None,
      description="A URI reference that identifies the specific occurrence of the problem. "
                  "It may or may not yield further information if dereferenced."
  )
  mandate_reference: Optional[str] = Field(
      None,
      description="The ID of the mandate that caused this error, if applicable."
  )
  error_code: Optional[str] = Field(
      None,
      description="An application-specific error code for programmatic handling."
  )
  retry_after: Optional[int] = Field(
      None,
      description="The number of seconds after which the client should retry the request, "
                  "if applicable."
  )
  extensions: Optional[Dict[str, Any]] = Field(
      None,
      description="Additional error-specific information that can be included "
                  "for debugging or context."
  )


def create_error(
    error_type: ErrorType,
    title: str,
    status: int,
    detail: str,
    instance: Optional[str] = None,
    mandate_reference: Optional[str] = None,
    error_code: Optional[str] = None,
    retry_after: Optional[int] = None,
    extensions: Optional[Dict[str, Any]] = None
) -> AP2Error:
  """Creates a standardized AP2 error response.

  Args:
    error_type: The type of error from the ErrorType enum
    title: A short, human-readable summary of the problem
    status: The HTTP status code
    detail: A human-readable explanation of the specific occurrence
    instance: Optional URI reference to the specific occurrence
    mandate_reference: Optional mandate ID that caused the error
    error_code: Optional application-specific error code
    retry_after: Optional retry delay in seconds
    extensions: Optional additional error-specific information

  Returns:
    A standardized AP2Error object
  """
  return AP2Error(
      type=error_type.value,
      title=title,
      status=status,
      detail=detail,
      instance=instance,
      mandate_reference=mandate_reference,
      error_code=error_code,
      retry_after=retry_after,
      extensions=extensions
  )


# Common error responses for frequent scenarios
def mandate_not_found_error(mandate_id: str) -> AP2Error:
  """Creates a standardized error for when a mandate is not found."""
  return create_error(
      error_type=ErrorType.MANDATE_NOT_FOUND,
      title="Mandate Not Found",
      status=404,
      detail=f"The mandate with ID '{mandate_id}' could not be found.",
      mandate_reference=mandate_id
  )


def mandate_already_revoked_error(mandate_id: str) -> AP2Error:
  """Creates a standardized error for when a mandate is already revoked."""
  return create_error(
      error_type=ErrorType.MANDATE_ALREADY_REVOKED,
      title="Mandate Already Revoked",
      status=409,
      detail=f"The mandate with ID '{mandate_id}' has already been revoked.",
      mandate_reference=mandate_id
  )


def mandate_expired_error(mandate_id: str) -> AP2Error:
  """Creates a standardized error for when a mandate has expired."""
  return create_error(
      error_type=ErrorType.MANDATE_EXPIRED,
      title="Mandate Expired",
      status=410,
      detail=f"The mandate with ID '{mandate_id}' has expired and cannot be executed.",
      mandate_reference=mandate_id
  )


def payment_declined_error(detail: str, mandate_reference: Optional[str] = None) -> AP2Error:
  """Creates a standardized error for when a payment is declined."""
  return create_error(
      error_type=ErrorType.PAYMENT_DECLINED,
      title="Payment Declined",
      status=402,
      detail=detail,
      mandate_reference=mandate_reference
  )


def unauthorized_agent_error(agent_id: str) -> AP2Error:
  """Creates a standardized error for unauthorized agent access."""
  return create_error(
      error_type=ErrorType.UNAUTHORIZED_AGENT,
      title="Unauthorized Agent",
      status=401,
      detail=f"Agent '{agent_id}' is not authorized to perform this action.",
      error_code="UNAUTHORIZED_AGENT"
  )


def internal_server_error(detail: str) -> AP2Error:
  """Creates a standardized error for internal server errors."""
  return create_error(
      error_type=ErrorType.INTERNAL_SERVER_ERROR,
      title="Internal Server Error",
      status=500,
      detail=detail
  )
